rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Authentication Helpers
    function isAuthenticated() {
      return request.auth != null;
    }

    function isParkingOwner() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'Parking Owner';
    }

    function isValidParking(parking) {
      return parking.keys().hasAll(['name', 'location', 'capacity', 'price', 'available', 'ownerId']) &&
             parking.location is map &&
             parking.location.keys().hasAll(['latitude', 'longitude']) &&
             parking.location.latitude is number &&
             parking.location.longitude is number &&
             parking.capacity is number &&
             parking.available is number &&
             parking.available <= parking.capacity &&
             parking.price is string &&
             parking.ownerId == request.auth.uid;
    }

    function isValidSpot(spot) {
      return spot.keys().hasAll(['number', 'isAvailable', 'type']) &&
             spot.isAvailable is bool &&
             spot.number is string;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                   request.resource.data.keys().hasAll(['email', 'userType']) &&
                   request.resource.data.userType in ['User', 'Parking Owner'];
      allow update: if request.auth.uid == userId;

      // QR Codes under Users
      match /qrcodes/{qrId} {
        allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.keys().hasAll(['parkingId', 'parkingName', 'spotNumber', 'bookingId', 'timestamp', 'qrData']) &&
                      request.resource.data.timestamp is string;
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      match /ownedParkings/{parkingId} {
        allow create: if isParkingOwner() && 
                     request.resource.data.ownerId == request.auth.uid &&
                     request.resource.data.available == request.resource.data.capacity &&
                     isValidParking(request.resource.data);
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'Parking Owner';
      }
    }

    // QR Codes under Users Collection
    match /users/{userId}/qrcodes/{qrId} {
      allow create: if isAuthenticated() &&
                    request.auth.uid == userId &&
                    request.resource.data.keys().hasAll(['parkingId', 'parkingName', 'spotNumber', 'bookingId', 'timestamp', 'qrData', 'userId']) &&
                    request.resource.data.timestamp is string &&
                    request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && request.auth.uid == userId;
    }

    // Parking Collection
    match /parking/{parkingId} {
      allow read: if isAuthenticated();
      // Add list permission for parking collection
      allow list: if isAuthenticated();
      
      match /spots/{spotId} {
        // Updated spot rules to allow batch initialization
        allow read: if isAuthenticated();
        // Add list permission for spots subcollection
        allow list: if isAuthenticated();
        
        // Allow updates with specific field restrictions
        allow update: if 
          (isParkingOwner() && 
           get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId == request.auth.uid) ||
          (isAuthenticated() && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isAvailable', 'lastUpdated']));

        // Add lastBookingId and lastUserId to allowed fields
        allow update: if 
          (isParkingOwner() && 
           get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId == request.auth.uid) ||
          (isAuthenticated() && 
           request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['isAvailable', 'lastUpdated', 'lastBookingId', 'lastUserId']));

        // Update spot rules to allow additional fields
        allow update: if 
          (isParkingOwner() && 
           get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId == request.auth.uid) ||
          (isAuthenticated() && 
           request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['isAvailable', 'lastUpdated', 'lastBookingId', 'lastUserId', 'lastAction']));

        // Allow automatic spot cleanup
        allow write: if isAuthenticated() &&
                  (request.auth.uid == resource.data.lastUserId ||
                   request.auth.uid == get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId);
      }

      // Allow parking owners to create parking documents
      allow create: if isParkingOwner() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.available == request.resource.data.capacity &&
                   isValidParking(request.resource.data);
      
      // Allow parking owners to update parking documents
      allow update: if (isParkingOwner() && resource.data.ownerId == request.auth.uid) ||
                   (isAuthenticated() && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['available']) &&
                    request.resource.data.available >= 0 &&
                    request.resource.data.available <= resource.data.capacity);
      
      // Allow parking owners to delete parking documents
      allow delete: if isParkingOwner() && 
                   resource.data.ownerId == request.auth.uid;
                   
      // QR Codes under Parking
      match /qrcodes/{qrId} {
        allow create: if isAuthenticated() &&
                      request.resource.data.keys().hasAll(['parkingId', 'parkingName', 'spotNumber', 'bookingId', 'timestamp', 'qrData', 'userId']) &&
                      request.resource.data.parkingId == parkingId &&
                      request.resource.data.timestamp is string;
        allow read: if isAuthenticated() &&
                    (get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId == request.auth.uid || 
                     exists(/databases/$(database)/documents/bookings/$(resource.data.bookingId)));
                     
        // Allow users to delete their own QR codes
        allow delete: if isAuthenticated() &&
                (request.auth.uid == get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId ||
                request.auth.uid == resource.data.userId); // Ensure userId is stored in the QR code document
      }
    }

    // Bookings Collection
    match /bookings/{bookingId} {
      function isValidStatus(status) {
        return status in ['active', 'cancelled', 'completed'];
      }

      // Allow only one active booking per parking per user
      function hasNoActiveBooking(parkingId) {
        return !exists(/databases/$(database)/documents/bookings) ||
        !request.auth.uid in get(/databases/$(database)/documents/bookings)
          .where('userId', '==', request.auth.uid)
          .where('parkingId', '==', parkingId)
          .where('status', '==', 'active').documents;
      }

      function hasNoActiveBookingInParking(parkingId) {
        return !exists(/databases/$(database)/documents/bookings
          .where('userId', '==', request.auth.uid)
          .where('parkingId', '==', parkingId)
          .where('status', '==', 'active')
          .limit(1));
      }

      // Allow reading when authenticated and either the owner or querying own bookings
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        (request.query != null && 
         request.query.filters.size() >= 1 && 
         request.query.filters[0].field == 'userId' && 
         request.query.filters[0].value == request.auth.uid)
      );

      // Allow creation with required fields
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['parkingId', 'userId', 'status', 'timestamp', 'parkingName', 'spotNumber']) &&
                   hasNoActiveBookingInParking(request.resource.data.parkingId) &&
                   isValidStatus(request.resource.data.status);
      
      // Allow updates for cancellation with required fields
      allow update: if isAuthenticated() &&
                   request.auth.uid == resource.data.userId &&
                   request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['status', 'cancelledAt', 'cancelledBy']) &&
                   request.resource.data.status == 'cancelled';
      
      // Allow deletion only for cancelled/completed bookings and trigger cleanup
      allow delete: if isAuthenticated() && 
                   request.auth.uid == resource.data.userId &&
                   (resource.data.status == 'cancelled' || 
                    resource.data.status == 'completed') &&
                   exists(/databases/$(database)/documents/parking/$(resource.data.parkingId)) &&
                   exists(/databases/$(database)/documents/parking/$(resource.data.parkingId)/spots/$(resource.data.spotId));
    }

    // Add a trigger rule for automatic cleanup
    match /parking/{parkingId}/spots/{spotId} {
      allow update: if isAuthenticated() &&
                   (isParkingOwner() || 
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['isAvailable', 'lastUpdated', 'lastBookingId', 'lastUserId', 'lastAction']) &&
                    request.resource.data.isAvailable == true &&
                    request.resource.data.lastAction == 'cancelled'));

      // Allow automatic spot cleanup
      allow write: if isAuthenticated() &&
                  (request.auth.uid == resource.data.lastUserId ||
                   request.auth.uid == get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId);
    }

    match /users/{userId}/qrcodes/{qrId} {
      // Allow deletion when booking is cancelled
      allow delete: if isAuthenticated() &&
                   request.auth.uid == userId &&
                   exists(/databases/$(database)/documents/bookings/$(qrId)) &&
                   get(/databases/$(database)/documents/bookings/$(qrId)).data.status == 'cancelled';
    }

    match /parking/{parkingId}/qrcodes/{qrId} {
      // Allow deletion when booking is cancelled
      allow delete: if isAuthenticated() &&
                   exists(/databases/$(database)/documents/bookings/$(qrId)) &&
                   get(/databases/$(database)/documents/bookings/$(qrId)).data.status == 'cancelled' &&
                   (request.auth.uid == resource.data.userId ||
                    request.auth.uid == get(/databases/$(database)/documents/parking/$(parkingId)).data.ownerId);
    }

    // Critical rules for QR codes and bookings
    match /users/{userId}/qrcodes/{qrId} {
      allow create: if isAuthenticated() &&
                    request.auth.uid == userId &&
                    request.resource.data.keys().hasAll(['parkingId', 'parkingName', 'spotNumber', 'bookingId', 'timestamp', 'qrData', 'userId']) &&
                    request.resource.data.timestamp is string;
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   exists(/databases/$(database)/documents/bookings/$(qrId)) &&
                   get(/databases/$(database)/documents/bookings/$(qrId)).data.status == 'cancelled';
    }

    // Improved booking rules
    match /bookings/{bookingId} {
      allow update: if isAuthenticated() &&
                   request.auth.uid == resource.data.userId &&
                   (
                     (request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['status', 'cancelledAt', 'cancelledBy']) &&
                     request.resource.data.status == 'cancelled')
                   );
      
      allow delete: if isAuthenticated() && 
                   request.auth.uid == resource.data.userId &&
                   resource.data.status == 'cancelled';
    }

    // Improved spot update rules
    match /parking/{parkingId}/spots/{spotId} {
      allow update: if isAuthenticated() &&
                   (isParkingOwner() || 
                    (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['isAvailable', 'lastUpdated', 'lastBookingId', 'lastUserId', 'lastAction']) &&
                    request.resource.data.isAvailable == true));
    }

    // Add cleanup trigger for parking availability
    match /parking/{parkingId} {
      allow update: if isAuthenticated() &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['available']) &&
                   request.resource.data.available >= 0 &&
                   request.resource.data.available <= resource.data.capacity;
    }

    match /parking/{parkingId}/spots/{spotId} {
      // Allow spot updates with proper validation
      allow update: if isAuthenticated() &&
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['isAvailable', 'lastUpdated', 'lastBookingId', 'lastUserId', 'lastAction']) &&
        request.resource.data.isAvailable is bool &&
        request.resource.data.lastUpdated is timestamp &&
        request.resource.data.lastBookingId is string &&
        request.resource.data.lastUserId == request.auth.uid);
    }

    // Updated booking rules
    match /bookings/{bookingId} {
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.keys().hasAll([
                     'parkingId', 
                     'userId', 
                     'status', 
                     'timestamp', 
                     'parkingName', 
                     'spotNumber',
                     'spotId'
                   ]) &&
                   request.resource.data.status == 'active';
    }
  }
}